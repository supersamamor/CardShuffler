@page
@model CardShuffler.Web.Pages.Card.IndexModel
@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@


    <div class="container-fluid">
        <form method="get">
            <div class="col-lg-3">
                <a class="btn btn-primary" onclick="Randomize();" style="color:#fff;float:left;">Shuffle Cards</a>
                <button id="btnRandomize" class="btn btn-primary" style="display:none;">Shuffle Card Hidden</button>
            </div>
            <div class="col-lg-3 input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text" id="btnGroupAddon">Effects</div>
                </div>
                <select id="inputEffects" class="form-control">
                    <option value="2">None</option>
                    <option value="1">Snap Effect</option>
                </select>               
            </div>           
        </form>
        <br />
        <br />
        <div class="row">

            @foreach (var item in Model.CardList)
            {
                <div id="card_@(item)" class="item disintegration-target" style="">
                    <img src="Cards/@(item).svg" style="" height="100" />
                </div>
            }
        </div>
    </div>





<style>
    .disintegration-container {
        position: absolute;
        pointer-events: none;
    }
    .disintegration-container  > canvas {
        position: absolute;
        left: 0;
        top: 0;
        transition: transform 1s ease-out, opacity 1s ease-out;
        opacity: 1;
        transform:
        rotate(0deg) translate(0px, 0px) rotate(0deg);
    }


    @@keyframes debug-pulse {
      0% { filter: none; }
      95% { filter: none; }
      95% { filter: drop-shadow(0 1px 0 rgba(255,0,0,1)); }
      100% { filter: drop-shadow(0 1px 0 rgba(255,0,0,1)); }
    }

    /* == Normal styling below == */
 

    .item {
      max-width: 60ch;
      background: #fff;
      margin-bottom: 1em;
      padding: 1em;
      border-radius: 5px;
      border: 1px solid #ddd;
    }

    .item h1 { margin-top: 0; }
    .item p { margin-bottom: 0; }
    .item img { float: right; }
</style>
@section Scripts {
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <script src="https://chancejs.com/chance.min.js"></script>
    <script src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.5/jquery-ui.min.js'></script>

    <script type="text/javascript">
       const DEBUG = false;
        const REPETITION_COUNT = 2; // number of times each pixel is assigned to a canvas
        const NUM_FRAMES = 128;

        /**
         * Generates the individual subsets of pixels that are animated to create the effect
         * @@param {HTMLCanvasElement} ctx
         * @@param {number} count The higher the frame count, the less grouped the pixels will look - Google use 32, but for our elms we use 128 since we have images near the edges
         * @@return {HTMLCanvasElement[]} Each canvas contains a subset of the original pixels
         */
        function generateFrames($canvas, count = 32) {
          const { width, height } = $canvas;
          const ctx = $canvas.getContext("2d");
          const originalData = ctx.getImageData(0, 0, width, height);
          const imageDatas = [...Array(count)].map(
            (_,i) => ctx.createImageData(width, height)
          );
  
          // assign the pixels to a canvas
          // each pixel is assigned to 2 canvas', based on its x-position
          for (let x = 0; x < width; ++x) {
            for (let y = 0; y < height; ++y) {
              for (let i = 0; i < REPETITION_COUNT; ++i) {
                const dataIndex = Math.floor(
                  count * (Math.random() + 2 * x / width) / 3
                );
                const pixelIndex = (y * width + x) * 4;
                // copy the pixel over from the original image
                for (let offset = 0; offset < 4; ++offset) {
                  imageDatas[dataIndex].data[pixelIndex + offset]
                    = originalData.data[pixelIndex + offset];
                }
              }
            }
          }
  
          // turn image datas into canvas'
          return imageDatas.map(data => {
            const $c = $canvas.cloneNode(true);
            $c.getContext("2d").putImageData(data, 0, 0);
            return $c;
          });
        }

        /**
         * Inserts a new element over an old one, hiding the old one
         */
        function replaceElementVisually($old, $new) {
          const $parent = $old.offsetParent;
          $new.style.top = `${$old.offsetTop}px`;
          $new.style.left = `${$old.offsetLeft}px`;
          $new.style.width = `${$old.offsetWidth}px`;
          $new.style.height = `${$old.offsetHeight}px`;
          $parent.appendChild($new);
          $old.style.visibility = "hidden";
        }

        /**
         * Disintegrates an element
         * @@param {HTMLElement} $elm
         */
        function disintegrate($elm) {
          html2canvas($elm).then($canvas => {    
            // create the container we'll use to replace the element with
            const $container = document.createElement("div");
            $container.classList.add("disintegration-container");
    
            // setup the frames for animation
            const $frames = generateFrames($canvas, NUM_FRAMES);
            $frames.forEach(($frame, i) => {
              $frame.style.transitionDelay = `${1.35 * i / $frames.length}s`;
              $container.appendChild($frame);
            });
    
            // then insert them into the DOM over the element
            replaceElementVisually($elm, $container);
    
            // then animate them
            $container.offsetLeft; // forces reflow, so CSS we apply below does transition
            if (!DEBUG) {
              // set the values the frame should animate to
              // note that this is done after reflow so the transitions trigger
              $frames.forEach($frame => {
                const randomRadian = 2 * Math.PI * (Math.random() - 0.5);
                $frame.style.transform = 
                  `rotate(${15 * (Math.random() - 0.5)}deg) translate(${60 * Math.cos(randomRadian)}px, ${30 * Math.sin(randomRadian)}px)
        rotate(${15 * (Math.random() - 0.5)}deg)`;
			          $frame.style.opacity = 0;
              });
            } else {
              $frames.forEach($frame => {
                $frame.style.animation = `debug-pulse 1s ease ${$frame.style.transitionDelay} infinite alternate`;
              });
            }
          });
        }


        /** === Below is just to bind the module and the DOM == */
        [...document.querySelectorAll(".disintegration-target")].forEach($elm => {
          $elm.addEventListener("click", () => {
            if ($elm.disintegrated) { return; }
            $elm.disintegrated = true;
            disintegrate($elm);
          });
        });




        var i = 1;                    
        var waitPerItem = 10;
        function Disintegrate () {           
           setTimeout(function () {    
              document.getElementById("card_" + i).click();       
              i++;                     
              if (i <= 52) {            
                  Disintegrate();  
                  if (i == 52) { document.getElementById("btnRandomize").click();}
              }                        
           }, waitPerItem)
        }

        function Randomize() {
          
            if ($('#inputEffects').val() == 1) {   Disintegrate(); }
            else { document.getElementById("btnRandomize").click(); }
        }        
    </script>
}
